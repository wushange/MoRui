package cn.connxun.morui.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.connxun.morui.entity.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, String> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property PointQuantity = new Property(3, String.class, "pointQuantity", false, "POINT_QUANTITY");
        public final static Property PointQuantityAbnormality = new Property(4, String.class, "pointQuantityAbnormality", false, "POINT_QUANTITY_ABNORMALITY");
        public final static Property DepartmentCode = new Property(5, String.class, "departmentCode", false, "DEPARTMENT_CODE");
        public final static Property DepartmentName = new Property(6, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property JobsCode = new Property(7, String.class, "jobsCode", false, "JOBS_CODE");
        public final static Property JobsName = new Property(8, String.class, "jobsName", false, "JOBS_NAME");
        public final static Property PlanId = new Property(9, String.class, "planId", false, "PLAN_ID");
        public final static Property StartDate = new Property(10, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(11, String.class, "endDate", false, "END_DATE");
        public final static Property Type = new Property(12, int.class, "type", false, "TYPE");
        public final static Property CheckUserName = new Property(13, String.class, "checkUserName", false, "CHECK_USER_NAME");
        public final static Property CheckUserEnterpriseId = new Property(14, int.class, "checkUserEnterpriseId", false, "CHECK_USER_ENTERPRISE_ID");
        public final static Property CheckUserDepartmentId = new Property(15, int.class, "checkUserDepartmentId", false, "CHECK_USER_DEPARTMENT_ID");
        public final static Property CheckUserJobsId = new Property(16, int.class, "checkUserJobsId", false, "CHECK_USER_JOBS_ID");
        public final static Property CheckUserId = new Property(17, int.class, "checkUserId", false, "CHECK_USER_ID");
        public final static Property UploadDate = new Property(18, String.class, "uploadDate", false, "UPLOAD_DATE");
        public final static Property Status = new Property(19, int.class, "status", false, "STATUS");
        public final static Property CheckStatus = new Property(20, int.class, "checkStatus", false, "CHECK_STATUS");
        public final static Property UploadStatus = new Property(21, int.class, "uploadStatus", false, "UPLOAD_STATUS");
        public final static Property UserId = new Property(22, long.class, "userId", false, "USER_ID");
    }

    private DaoSession daoSession;

    private Query<Task> user_TaskListQuery;

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CONTENT\" TEXT," + // 2: content
                "\"POINT_QUANTITY\" TEXT," + // 3: pointQuantity
                "\"POINT_QUANTITY_ABNORMALITY\" TEXT," + // 4: pointQuantityAbnormality
                "\"DEPARTMENT_CODE\" TEXT," + // 5: departmentCode
                "\"DEPARTMENT_NAME\" TEXT," + // 6: departmentName
                "\"JOBS_CODE\" TEXT," + // 7: jobsCode
                "\"JOBS_NAME\" TEXT," + // 8: jobsName
                "\"PLAN_ID\" TEXT," + // 9: planId
                "\"START_DATE\" TEXT," + // 10: startDate
                "\"END_DATE\" TEXT," + // 11: endDate
                "\"TYPE\" INTEGER NOT NULL ," + // 12: type
                "\"CHECK_USER_NAME\" TEXT," + // 13: checkUserName
                "\"CHECK_USER_ENTERPRISE_ID\" INTEGER NOT NULL ," + // 14: checkUserEnterpriseId
                "\"CHECK_USER_DEPARTMENT_ID\" INTEGER NOT NULL ," + // 15: checkUserDepartmentId
                "\"CHECK_USER_JOBS_ID\" INTEGER NOT NULL ," + // 16: checkUserJobsId
                "\"CHECK_USER_ID\" INTEGER NOT NULL ," + // 17: checkUserId
                "\"UPLOAD_DATE\" TEXT," + // 18: uploadDate
                "\"STATUS\" INTEGER NOT NULL ," + // 19: status
                "\"CHECK_STATUS\" INTEGER NOT NULL ," + // 20: checkStatus
                "\"UPLOAD_STATUS\" INTEGER NOT NULL ," + // 21: uploadStatus
                "\"USER_ID\" INTEGER NOT NULL );"); // 22: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String pointQuantity = entity.getPointQuantity();
        if (pointQuantity != null) {
            stmt.bindString(4, pointQuantity);
        }
 
        String pointQuantityAbnormality = entity.getPointQuantityAbnormality();
        if (pointQuantityAbnormality != null) {
            stmt.bindString(5, pointQuantityAbnormality);
        }
 
        String departmentCode = entity.getDepartmentCode();
        if (departmentCode != null) {
            stmt.bindString(6, departmentCode);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(7, departmentName);
        }
 
        String jobsCode = entity.getJobsCode();
        if (jobsCode != null) {
            stmt.bindString(8, jobsCode);
        }
 
        String jobsName = entity.getJobsName();
        if (jobsName != null) {
            stmt.bindString(9, jobsName);
        }
 
        String planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindString(10, planId);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(11, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(12, endDate);
        }
        stmt.bindLong(13, entity.getType());
 
        String checkUserName = entity.getCheckUserName();
        if (checkUserName != null) {
            stmt.bindString(14, checkUserName);
        }
        stmt.bindLong(15, entity.getCheckUserEnterpriseId());
        stmt.bindLong(16, entity.getCheckUserDepartmentId());
        stmt.bindLong(17, entity.getCheckUserJobsId());
        stmt.bindLong(18, entity.getCheckUserId());
 
        String uploadDate = entity.getUploadDate();
        if (uploadDate != null) {
            stmt.bindString(19, uploadDate);
        }
        stmt.bindLong(20, entity.getStatus());
        stmt.bindLong(21, entity.getCheckStatus());
        stmt.bindLong(22, entity.getUploadStatus());
        stmt.bindLong(23, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String pointQuantity = entity.getPointQuantity();
        if (pointQuantity != null) {
            stmt.bindString(4, pointQuantity);
        }
 
        String pointQuantityAbnormality = entity.getPointQuantityAbnormality();
        if (pointQuantityAbnormality != null) {
            stmt.bindString(5, pointQuantityAbnormality);
        }
 
        String departmentCode = entity.getDepartmentCode();
        if (departmentCode != null) {
            stmt.bindString(6, departmentCode);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(7, departmentName);
        }
 
        String jobsCode = entity.getJobsCode();
        if (jobsCode != null) {
            stmt.bindString(8, jobsCode);
        }
 
        String jobsName = entity.getJobsName();
        if (jobsName != null) {
            stmt.bindString(9, jobsName);
        }
 
        String planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindString(10, planId);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(11, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(12, endDate);
        }
        stmt.bindLong(13, entity.getType());
 
        String checkUserName = entity.getCheckUserName();
        if (checkUserName != null) {
            stmt.bindString(14, checkUserName);
        }
        stmt.bindLong(15, entity.getCheckUserEnterpriseId());
        stmt.bindLong(16, entity.getCheckUserDepartmentId());
        stmt.bindLong(17, entity.getCheckUserJobsId());
        stmt.bindLong(18, entity.getCheckUserId());
 
        String uploadDate = entity.getUploadDate();
        if (uploadDate != null) {
            stmt.bindString(19, uploadDate);
        }
        stmt.bindLong(20, entity.getStatus());
        stmt.bindLong(21, entity.getCheckStatus());
        stmt.bindLong(22, entity.getUploadStatus());
        stmt.bindLong(23, entity.getUserId());
    }

    @Override
    protected final void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pointQuantity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pointQuantityAbnormality
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // departmentCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // departmentName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // jobsCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // jobsName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // planId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // startDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // endDate
            cursor.getInt(offset + 12), // type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // checkUserName
            cursor.getInt(offset + 14), // checkUserEnterpriseId
            cursor.getInt(offset + 15), // checkUserDepartmentId
            cursor.getInt(offset + 16), // checkUserJobsId
            cursor.getInt(offset + 17), // checkUserId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // uploadDate
            cursor.getInt(offset + 19), // status
            cursor.getInt(offset + 20), // checkStatus
            cursor.getInt(offset + 21), // uploadStatus
            cursor.getLong(offset + 22) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPointQuantity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPointQuantityAbnormality(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartmentCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDepartmentName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJobsCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJobsName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlanId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEndDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType(cursor.getInt(offset + 12));
        entity.setCheckUserName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCheckUserEnterpriseId(cursor.getInt(offset + 14));
        entity.setCheckUserDepartmentId(cursor.getInt(offset + 15));
        entity.setCheckUserJobsId(cursor.getInt(offset + 16));
        entity.setCheckUserId(cursor.getInt(offset + 17));
        entity.setUploadDate(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStatus(cursor.getInt(offset + 19));
        entity.setCheckStatus(cursor.getInt(offset + 20));
        entity.setUploadStatus(cursor.getInt(offset + 21));
        entity.setUserId(cursor.getLong(offset + 22));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Task entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "taskList" to-many relationship of User. */
    public List<Task> _queryUser_TaskList(long userId) {
        synchronized (this) {
            if (user_TaskListQuery == null) {
                QueryBuilder<Task> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_TaskListQuery = queryBuilder.build();
            }
        }
        Query<Task> query = user_TaskListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
