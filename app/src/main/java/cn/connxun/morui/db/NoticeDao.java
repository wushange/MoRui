package cn.connxun.morui.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.connxun.morui.entity.Notice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTICE".
*/
public class NoticeDao extends AbstractDao<Notice, Long> {

    public static final String TABLENAME = "NOTICE";

    /**
     * Properties of entity Notice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property NoticeId = new Property(1, String.class, "noticeId", false, "NOTICE_ID");
        public final static Property NoticeName = new Property(2, String.class, "noticeName", false, "NOTICE_NAME");
        public final static Property NoticeContent = new Property(3, String.class, "noticeContent", false, "NOTICE_CONTENT");
        public final static Property IsConfirm = new Property(4, int.class, "isConfirm", false, "IS_CONFIRM");
        public final static Property UserId = new Property(5, int.class, "userId", false, "USER_ID");
        public final static Property IsRead = new Property(6, int.class, "isRead", false, "IS_READ");
        public final static Property CreateDate = new Property(7, String.class, "createDate", false, "CREATE_DATE");
    }


    public NoticeDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NOTICE_ID\" TEXT," + // 1: noticeId
                "\"NOTICE_NAME\" TEXT," + // 2: noticeName
                "\"NOTICE_CONTENT\" TEXT," + // 3: noticeContent
                "\"IS_CONFIRM\" INTEGER NOT NULL ," + // 4: isConfirm
                "\"USER_ID\" INTEGER NOT NULL ," + // 5: userId
                "\"IS_READ\" INTEGER NOT NULL ," + // 6: isRead
                "\"CREATE_DATE\" TEXT);"); // 7: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Notice entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String noticeId = entity.getNoticeId();
        if (noticeId != null) {
            stmt.bindString(2, noticeId);
        }
 
        String noticeName = entity.getNoticeName();
        if (noticeName != null) {
            stmt.bindString(3, noticeName);
        }
 
        String noticeContent = entity.getNoticeContent();
        if (noticeContent != null) {
            stmt.bindString(4, noticeContent);
        }
        stmt.bindLong(5, entity.getIsConfirm());
        stmt.bindLong(6, entity.getUserId());
        stmt.bindLong(7, entity.getIsRead());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(8, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Notice entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String noticeId = entity.getNoticeId();
        if (noticeId != null) {
            stmt.bindString(2, noticeId);
        }
 
        String noticeName = entity.getNoticeName();
        if (noticeName != null) {
            stmt.bindString(3, noticeName);
        }
 
        String noticeContent = entity.getNoticeContent();
        if (noticeContent != null) {
            stmt.bindString(4, noticeContent);
        }
        stmt.bindLong(5, entity.getIsConfirm());
        stmt.bindLong(6, entity.getUserId());
        stmt.bindLong(7, entity.getIsRead());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(8, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Notice readEntity(Cursor cursor, int offset) {
        Notice entity = new Notice( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noticeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // noticeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // noticeContent
            cursor.getInt(offset + 4), // isConfirm
            cursor.getInt(offset + 5), // userId
            cursor.getInt(offset + 6), // isRead
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Notice entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNoticeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoticeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNoticeContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsConfirm(cursor.getInt(offset + 4));
        entity.setUserId(cursor.getInt(offset + 5));
        entity.setIsRead(cursor.getInt(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Notice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Notice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Notice entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
