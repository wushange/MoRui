package cn.connxun.morui.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.connxun.morui.entity.TaskSub;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_SUB".
*/
public class TaskSubDao extends AbstractDao<TaskSub, String> {

    public static final String TABLENAME = "TASK_SUB";

    /**
     * Properties of entity TaskSub.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TaskId = new Property(1, String.class, "taskId", false, "TASK_ID");
        public final static Property PointId = new Property(2, String.class, "pointId", false, "POINT_ID");
        public final static Property PointName = new Property(3, String.class, "pointName", false, "POINT_NAME");
        public final static Property DepartmentCode = new Property(4, String.class, "departmentCode", false, "DEPARTMENT_CODE");
        public final static Property DepartmentName = new Property(5, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property JobsCode = new Property(6, String.class, "jobsCode", false, "JOBS_CODE");
        public final static Property JobsName = new Property(7, String.class, "jobsName", false, "JOBS_NAME");
        public final static Property EquipmentName = new Property(8, String.class, "equipmentName", false, "EQUIPMENT_NAME");
        public final static Property ObjectName = new Property(9, String.class, "objectName", false, "OBJECT_NAME");
        public final static Property Tag = new Property(10, String.class, "tag", false, "TAG");
        public final static Property TagValue = new Property(11, String.class, "tagValue", false, "TAG_VALUE");
        public final static Property Gps = new Property(12, String.class, "gps", false, "GPS");
        public final static Property IsSubJudge = new Property(13, int.class, "isSubJudge", false, "IS_SUB_JUDGE");
        public final static Property SubjectiveJudgment = new Property(14, String.class, "subjectiveJudgment", false, "SUBJECTIVE_JUDGMENT");
        public final static Property Unit = new Property(15, String.class, "unit", false, "UNIT");
        public final static Property MinValue = new Property(16, String.class, "minValue", false, "MIN_VALUE");
        public final static Property StandardValue = new Property(17, String.class, "standardValue", false, "STANDARD_VALUE");
        public final static Property BigValue = new Property(18, String.class, "bigValue", false, "BIG_VALUE");
        public final static Property YellowWarning = new Property(19, String.class, "yellowWarning", false, "YELLOW_WARNING");
        public final static Property OrangeWarning = new Property(20, String.class, "orangeWarning", false, "ORANGE_WARNING");
        public final static Property RedWarning = new Property(21, String.class, "redWarning", false, "RED_WARNING");
        public final static Property DisplayOrder = new Property(22, int.class, "displayOrder", false, "DISPLAY_ORDER");
        public final static Property ContingencyScene = new Property(23, String.class, "contingencyScene", false, "CONTINGENCY_SCENE");
        public final static Property ContingencyInfoCode = new Property(24, String.class, "contingencyInfoCode", false, "CONTINGENCY_INFO_CODE");
        public final static Property ImportantLevel = new Property(25, String.class, "importantLevel", false, "IMPORTANT_LEVEL");
        public final static Property DangerLevel = new Property(26, String.class, "dangerLevel", false, "DANGER_LEVEL");
        public final static Property GovernmentPolicy = new Property(27, String.class, "governmentPolicy", false, "GOVERNMENT_POLICY");
        public final static Property CheckResultValue = new Property(28, String.class, "checkResultValue", false, "CHECK_RESULT_VALUE");
        public final static Property CheckResult = new Property(29, String.class, "checkResult", false, "CHECK_RESULT");
        public final static Property Remark = new Property(30, String.class, "remark", false, "REMARK");
        public final static Property FilePath = new Property(31, String.class, "filePath", false, "FILE_PATH");
        public final static Property CheckStatus = new Property(32, int.class, "checkStatus", false, "CHECK_STATUS");
    }

    private Query<TaskSub> task_TaskSubListQuery;

    public TaskSubDao(DaoConfig config) {
        super(config);
    }
    
    public TaskSubDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_SUB\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TASK_ID\" TEXT," + // 1: taskId
                "\"POINT_ID\" TEXT," + // 2: pointId
                "\"POINT_NAME\" TEXT," + // 3: pointName
                "\"DEPARTMENT_CODE\" TEXT," + // 4: departmentCode
                "\"DEPARTMENT_NAME\" TEXT," + // 5: departmentName
                "\"JOBS_CODE\" TEXT," + // 6: jobsCode
                "\"JOBS_NAME\" TEXT," + // 7: jobsName
                "\"EQUIPMENT_NAME\" TEXT," + // 8: equipmentName
                "\"OBJECT_NAME\" TEXT," + // 9: objectName
                "\"TAG\" TEXT," + // 10: tag
                "\"TAG_VALUE\" TEXT," + // 11: tagValue
                "\"GPS\" TEXT," + // 12: gps
                "\"IS_SUB_JUDGE\" INTEGER NOT NULL ," + // 13: isSubJudge
                "\"SUBJECTIVE_JUDGMENT\" TEXT," + // 14: subjectiveJudgment
                "\"UNIT\" TEXT," + // 15: unit
                "\"MIN_VALUE\" TEXT," + // 16: minValue
                "\"STANDARD_VALUE\" TEXT," + // 17: standardValue
                "\"BIG_VALUE\" TEXT," + // 18: bigValue
                "\"YELLOW_WARNING\" TEXT," + // 19: yellowWarning
                "\"ORANGE_WARNING\" TEXT," + // 20: orangeWarning
                "\"RED_WARNING\" TEXT," + // 21: redWarning
                "\"DISPLAY_ORDER\" INTEGER NOT NULL ," + // 22: displayOrder
                "\"CONTINGENCY_SCENE\" TEXT," + // 23: contingencyScene
                "\"CONTINGENCY_INFO_CODE\" TEXT," + // 24: contingencyInfoCode
                "\"IMPORTANT_LEVEL\" TEXT," + // 25: importantLevel
                "\"DANGER_LEVEL\" TEXT," + // 26: dangerLevel
                "\"GOVERNMENT_POLICY\" TEXT," + // 27: governmentPolicy
                "\"CHECK_RESULT_VALUE\" TEXT," + // 28: checkResultValue
                "\"CHECK_RESULT\" TEXT," + // 29: checkResult
                "\"REMARK\" TEXT," + // 30: remark
                "\"FILE_PATH\" TEXT," + // 31: filePath
                "\"CHECK_STATUS\" INTEGER NOT NULL );"); // 32: checkStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_SUB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskSub entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String pointId = entity.getPointId();
        if (pointId != null) {
            stmt.bindString(3, pointId);
        }
 
        String pointName = entity.getPointName();
        if (pointName != null) {
            stmt.bindString(4, pointName);
        }
 
        String departmentCode = entity.getDepartmentCode();
        if (departmentCode != null) {
            stmt.bindString(5, departmentCode);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(6, departmentName);
        }
 
        String jobsCode = entity.getJobsCode();
        if (jobsCode != null) {
            stmt.bindString(7, jobsCode);
        }
 
        String jobsName = entity.getJobsName();
        if (jobsName != null) {
            stmt.bindString(8, jobsName);
        }
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(9, equipmentName);
        }
 
        String objectName = entity.getObjectName();
        if (objectName != null) {
            stmt.bindString(10, objectName);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(11, tag);
        }
 
        String tagValue = entity.getTagValue();
        if (tagValue != null) {
            stmt.bindString(12, tagValue);
        }
 
        String gps = entity.getGps();
        if (gps != null) {
            stmt.bindString(13, gps);
        }
        stmt.bindLong(14, entity.getIsSubJudge());
 
        String subjectiveJudgment = entity.getSubjectiveJudgment();
        if (subjectiveJudgment != null) {
            stmt.bindString(15, subjectiveJudgment);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(16, unit);
        }
 
        String minValue = entity.getMinValue();
        if (minValue != null) {
            stmt.bindString(17, minValue);
        }
 
        String standardValue = entity.getStandardValue();
        if (standardValue != null) {
            stmt.bindString(18, standardValue);
        }
 
        String bigValue = entity.getBigValue();
        if (bigValue != null) {
            stmt.bindString(19, bigValue);
        }
 
        String yellowWarning = entity.getYellowWarning();
        if (yellowWarning != null) {
            stmt.bindString(20, yellowWarning);
        }
 
        String orangeWarning = entity.getOrangeWarning();
        if (orangeWarning != null) {
            stmt.bindString(21, orangeWarning);
        }
 
        String redWarning = entity.getRedWarning();
        if (redWarning != null) {
            stmt.bindString(22, redWarning);
        }
        stmt.bindLong(23, entity.getDisplayOrder());
 
        String contingencyScene = entity.getContingencyScene();
        if (contingencyScene != null) {
            stmt.bindString(24, contingencyScene);
        }
 
        String contingencyInfoCode = entity.getContingencyInfoCode();
        if (contingencyInfoCode != null) {
            stmt.bindString(25, contingencyInfoCode);
        }
 
        String importantLevel = entity.getImportantLevel();
        if (importantLevel != null) {
            stmt.bindString(26, importantLevel);
        }
 
        String dangerLevel = entity.getDangerLevel();
        if (dangerLevel != null) {
            stmt.bindString(27, dangerLevel);
        }
 
        String governmentPolicy = entity.getGovernmentPolicy();
        if (governmentPolicy != null) {
            stmt.bindString(28, governmentPolicy);
        }
 
        String checkResultValue = entity.getCheckResultValue();
        if (checkResultValue != null) {
            stmt.bindString(29, checkResultValue);
        }
 
        String checkResult = entity.getCheckResult();
        if (checkResult != null) {
            stmt.bindString(30, checkResult);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(31, remark);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(32, filePath);
        }
        stmt.bindLong(33, entity.getCheckStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskSub entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String pointId = entity.getPointId();
        if (pointId != null) {
            stmt.bindString(3, pointId);
        }
 
        String pointName = entity.getPointName();
        if (pointName != null) {
            stmt.bindString(4, pointName);
        }
 
        String departmentCode = entity.getDepartmentCode();
        if (departmentCode != null) {
            stmt.bindString(5, departmentCode);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(6, departmentName);
        }
 
        String jobsCode = entity.getJobsCode();
        if (jobsCode != null) {
            stmt.bindString(7, jobsCode);
        }
 
        String jobsName = entity.getJobsName();
        if (jobsName != null) {
            stmt.bindString(8, jobsName);
        }
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(9, equipmentName);
        }
 
        String objectName = entity.getObjectName();
        if (objectName != null) {
            stmt.bindString(10, objectName);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(11, tag);
        }
 
        String tagValue = entity.getTagValue();
        if (tagValue != null) {
            stmt.bindString(12, tagValue);
        }
 
        String gps = entity.getGps();
        if (gps != null) {
            stmt.bindString(13, gps);
        }
        stmt.bindLong(14, entity.getIsSubJudge());
 
        String subjectiveJudgment = entity.getSubjectiveJudgment();
        if (subjectiveJudgment != null) {
            stmt.bindString(15, subjectiveJudgment);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(16, unit);
        }
 
        String minValue = entity.getMinValue();
        if (minValue != null) {
            stmt.bindString(17, minValue);
        }
 
        String standardValue = entity.getStandardValue();
        if (standardValue != null) {
            stmt.bindString(18, standardValue);
        }
 
        String bigValue = entity.getBigValue();
        if (bigValue != null) {
            stmt.bindString(19, bigValue);
        }
 
        String yellowWarning = entity.getYellowWarning();
        if (yellowWarning != null) {
            stmt.bindString(20, yellowWarning);
        }
 
        String orangeWarning = entity.getOrangeWarning();
        if (orangeWarning != null) {
            stmt.bindString(21, orangeWarning);
        }
 
        String redWarning = entity.getRedWarning();
        if (redWarning != null) {
            stmt.bindString(22, redWarning);
        }
        stmt.bindLong(23, entity.getDisplayOrder());
 
        String contingencyScene = entity.getContingencyScene();
        if (contingencyScene != null) {
            stmt.bindString(24, contingencyScene);
        }
 
        String contingencyInfoCode = entity.getContingencyInfoCode();
        if (contingencyInfoCode != null) {
            stmt.bindString(25, contingencyInfoCode);
        }
 
        String importantLevel = entity.getImportantLevel();
        if (importantLevel != null) {
            stmt.bindString(26, importantLevel);
        }
 
        String dangerLevel = entity.getDangerLevel();
        if (dangerLevel != null) {
            stmt.bindString(27, dangerLevel);
        }
 
        String governmentPolicy = entity.getGovernmentPolicy();
        if (governmentPolicy != null) {
            stmt.bindString(28, governmentPolicy);
        }
 
        String checkResultValue = entity.getCheckResultValue();
        if (checkResultValue != null) {
            stmt.bindString(29, checkResultValue);
        }
 
        String checkResult = entity.getCheckResult();
        if (checkResult != null) {
            stmt.bindString(30, checkResult);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(31, remark);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(32, filePath);
        }
        stmt.bindLong(33, entity.getCheckStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TaskSub readEntity(Cursor cursor, int offset) {
        TaskSub entity = new TaskSub( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pointId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pointName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // departmentCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // departmentName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // jobsCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // jobsName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // equipmentName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // objectName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tagValue
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // gps
            cursor.getInt(offset + 13), // isSubJudge
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // subjectiveJudgment
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // unit
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // minValue
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // standardValue
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // bigValue
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // yellowWarning
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // orangeWarning
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // redWarning
            cursor.getInt(offset + 22), // displayOrder
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // contingencyScene
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // contingencyInfoCode
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // importantLevel
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // dangerLevel
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // governmentPolicy
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // checkResultValue
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // checkResult
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // remark
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // filePath
            cursor.getInt(offset + 32) // checkStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskSub entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPointId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPointName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartmentCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartmentName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJobsCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJobsName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEquipmentName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setObjectName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTagValue(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGps(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsSubJudge(cursor.getInt(offset + 13));
        entity.setSubjectiveJudgment(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUnit(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMinValue(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStandardValue(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBigValue(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setYellowWarning(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOrangeWarning(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRedWarning(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDisplayOrder(cursor.getInt(offset + 22));
        entity.setContingencyScene(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setContingencyInfoCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setImportantLevel(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDangerLevel(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setGovernmentPolicy(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCheckResultValue(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCheckResult(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRemark(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setFilePath(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCheckStatus(cursor.getInt(offset + 32));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TaskSub entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(TaskSub entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskSub entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "taskSubList" to-many relationship of Task. */
    public List<TaskSub> _queryTask_TaskSubList(String taskId) {
        synchronized (this) {
            if (task_TaskSubListQuery == null) {
                QueryBuilder<TaskSub> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                task_TaskSubListQuery = queryBuilder.build();
            }
        }
        Query<TaskSub> query = task_TaskSubListQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

}
