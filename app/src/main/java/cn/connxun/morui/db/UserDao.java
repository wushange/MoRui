package cn.connxun.morui.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.connxun.morui.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Role_id = new Property(1, int.class, "role_id", false, "ROLE_ID");
        public final static Property Role_name = new Property(2, String.class, "role_name", false, "ROLE_NAME");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Randomcode = new Property(5, String.class, "randomcode", false, "RANDOMCODE");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property Realname = new Property(7, String.class, "realname", false, "REALNAME");
        public final static Property Sex = new Property(8, String.class, "sex", false, "SEX");
        public final static Property Telephone = new Property(9, String.class, "telephone", false, "TELEPHONE");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property EnterpriseId = new Property(11, int.class, "enterpriseId", false, "ENTERPRISE_ID");
        public final static Property EnterpriseName = new Property(12, String.class, "enterpriseName", false, "ENTERPRISE_NAME");
        public final static Property DepartmentId = new Property(13, int.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property DepartmentName = new Property(14, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property JobsId = new Property(15, int.class, "jobsId", false, "JOBS_ID");
        public final static Property JobsName = new Property(16, String.class, "jobsName", false, "JOBS_NAME");
        public final static Property Create_person = new Property(17, String.class, "create_person", false, "CREATE_PERSON");
        public final static Property Create_date = new Property(18, String.class, "create_date", false, "CREATE_DATE");
        public final static Property RowIndex = new Property(19, int.class, "rowIndex", false, "ROW_INDEX");
        public final static Property Token = new Property(20, String.class, "token", false, "TOKEN");
        public final static Property RealPwd = new Property(21, String.class, "realPwd", false, "REAL_PWD");
    }

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ROLE_ID\" INTEGER NOT NULL ," + // 1: role_id
                "\"ROLE_NAME\" TEXT," + // 2: role_name
                "\"USERNAME\" TEXT," + // 3: username
                "\"PASSWORD\" TEXT," + // 4: password
                "\"RANDOMCODE\" TEXT," + // 5: randomcode
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"REALNAME\" TEXT," + // 7: realname
                "\"SEX\" TEXT," + // 8: sex
                "\"TELEPHONE\" TEXT," + // 9: telephone
                "\"EMAIL\" TEXT," + // 10: email
                "\"ENTERPRISE_ID\" INTEGER NOT NULL ," + // 11: enterpriseId
                "\"ENTERPRISE_NAME\" TEXT," + // 12: enterpriseName
                "\"DEPARTMENT_ID\" INTEGER NOT NULL ," + // 13: departmentId
                "\"DEPARTMENT_NAME\" TEXT," + // 14: departmentName
                "\"JOBS_ID\" INTEGER NOT NULL ," + // 15: jobsId
                "\"JOBS_NAME\" TEXT," + // 16: jobsName
                "\"CREATE_PERSON\" TEXT," + // 17: create_person
                "\"CREATE_DATE\" TEXT," + // 18: create_date
                "\"ROW_INDEX\" INTEGER NOT NULL ," + // 19: rowIndex
                "\"TOKEN\" TEXT," + // 20: token
                "\"REAL_PWD\" TEXT);"); // 21: realPwd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRole_id());
 
        String role_name = entity.getRole_name();
        if (role_name != null) {
            stmt.bindString(3, role_name);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String randomcode = entity.getRandomcode();
        if (randomcode != null) {
            stmt.bindString(6, randomcode);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(8, realname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(10, telephone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
        stmt.bindLong(12, entity.getEnterpriseId());
 
        String enterpriseName = entity.getEnterpriseName();
        if (enterpriseName != null) {
            stmt.bindString(13, enterpriseName);
        }
        stmt.bindLong(14, entity.getDepartmentId());
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(15, departmentName);
        }
        stmt.bindLong(16, entity.getJobsId());
 
        String jobsName = entity.getJobsName();
        if (jobsName != null) {
            stmt.bindString(17, jobsName);
        }
 
        String create_person = entity.getCreate_person();
        if (create_person != null) {
            stmt.bindString(18, create_person);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(19, create_date);
        }
        stmt.bindLong(20, entity.getRowIndex());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(21, token);
        }
 
        String realPwd = entity.getRealPwd();
        if (realPwd != null) {
            stmt.bindString(22, realPwd);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRole_id());
 
        String role_name = entity.getRole_name();
        if (role_name != null) {
            stmt.bindString(3, role_name);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String randomcode = entity.getRandomcode();
        if (randomcode != null) {
            stmt.bindString(6, randomcode);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(8, realname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(10, telephone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
        stmt.bindLong(12, entity.getEnterpriseId());
 
        String enterpriseName = entity.getEnterpriseName();
        if (enterpriseName != null) {
            stmt.bindString(13, enterpriseName);
        }
        stmt.bindLong(14, entity.getDepartmentId());
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(15, departmentName);
        }
        stmt.bindLong(16, entity.getJobsId());
 
        String jobsName = entity.getJobsName();
        if (jobsName != null) {
            stmt.bindString(17, jobsName);
        }
 
        String create_person = entity.getCreate_person();
        if (create_person != null) {
            stmt.bindString(18, create_person);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(19, create_date);
        }
        stmt.bindLong(20, entity.getRowIndex());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(21, token);
        }
 
        String realPwd = entity.getRealPwd();
        if (realPwd != null) {
            stmt.bindString(22, realPwd);
        }
    }

    @Override
    protected final void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // role_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // role_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // randomcode
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // realname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // telephone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.getInt(offset + 11), // enterpriseId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // enterpriseName
            cursor.getInt(offset + 13), // departmentId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // departmentName
            cursor.getInt(offset + 15), // jobsId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // jobsName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // create_person
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // create_date
            cursor.getInt(offset + 19), // rowIndex
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // token
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // realPwd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRole_id(cursor.getInt(offset + 1));
        entity.setRole_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRandomcode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setRealname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTelephone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEnterpriseId(cursor.getInt(offset + 11));
        entity.setEnterpriseName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDepartmentId(cursor.getInt(offset + 13));
        entity.setDepartmentName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setJobsId(cursor.getInt(offset + 15));
        entity.setJobsName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreate_person(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreate_date(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRowIndex(cursor.getInt(offset + 19));
        entity.setToken(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRealPwd(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
