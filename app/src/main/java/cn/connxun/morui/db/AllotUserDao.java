package cn.connxun.morui.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.connxun.morui.entity.AllotUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALLOT_USER".
*/
public class AllotUserDao extends AbstractDao<AllotUser, Long> {

    public static final String TABLENAME = "ALLOT_USER";

    /**
     * Properties of entity AllotUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Realname = new Property(1, String.class, "realname", false, "REALNAME");
        public final static Property EnterpriseId = new Property(2, int.class, "enterpriseId", false, "ENTERPRISE_ID");
        public final static Property DepartmentId = new Property(3, int.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property JobsId = new Property(4, int.class, "jobsId", false, "JOBS_ID");
        public final static Property UserId = new Property(5, long.class, "userId", false, "USER_ID");
    }

    private Query<AllotUser> user_AllotUserListQuery;

    public AllotUserDao(DaoConfig config) {
        super(config);
    }
    
    public AllotUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALLOT_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"REALNAME\" TEXT," + // 1: realname
                "\"ENTERPRISE_ID\" INTEGER NOT NULL ," + // 2: enterpriseId
                "\"DEPARTMENT_ID\" INTEGER NOT NULL ," + // 3: departmentId
                "\"JOBS_ID\" INTEGER NOT NULL ," + // 4: jobsId
                "\"USER_ID\" INTEGER NOT NULL );"); // 5: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALLOT_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AllotUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(2, realname);
        }
        stmt.bindLong(3, entity.getEnterpriseId());
        stmt.bindLong(4, entity.getDepartmentId());
        stmt.bindLong(5, entity.getJobsId());
        stmt.bindLong(6, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AllotUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(2, realname);
        }
        stmt.bindLong(3, entity.getEnterpriseId());
        stmt.bindLong(4, entity.getDepartmentId());
        stmt.bindLong(5, entity.getJobsId());
        stmt.bindLong(6, entity.getUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AllotUser readEntity(Cursor cursor, int offset) {
        AllotUser entity = new AllotUser( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // realname
            cursor.getInt(offset + 2), // enterpriseId
            cursor.getInt(offset + 3), // departmentId
            cursor.getInt(offset + 4), // jobsId
            cursor.getLong(offset + 5) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AllotUser entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRealname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnterpriseId(cursor.getInt(offset + 2));
        entity.setDepartmentId(cursor.getInt(offset + 3));
        entity.setJobsId(cursor.getInt(offset + 4));
        entity.setUserId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AllotUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AllotUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AllotUser entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "allotUserList" to-many relationship of User. */
    public List<AllotUser> _queryUser_AllotUserList(long userId) {
        synchronized (this) {
            if (user_AllotUserListQuery == null) {
                QueryBuilder<AllotUser> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_AllotUserListQuery = queryBuilder.build();
            }
        }
        Query<AllotUser> query = user_AllotUserListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
